/*!
 * \file api.h
 * \brief C-API for gravix2's physics engine.
 *
 * The API of gravix2's physics engine should be used to create planets and
 * launch missiles. Missiles move on the surface of a unit sphere and in a
 * gravitational force field generated by static planets.
 *
 * In order to simulate the propagation of missiles, planets have to be defined.
 * Use new_planets() and set_planet() to create and initialize new planets and
 * pass the handle returned by the former when required by other functions. It
 * is the obligation of the caller to free allocated memory when necessary by
 * calling delete_planets() for planets and delete_missiles() for missiles.
 *
 * Missiles are created via new_missiles(). Note that new_planets() should be
 * used to craft separate universes, whereas multiple calls to new_missiles()
 * can be used in the same universe (referred to by the same planet handle.)
 * However, each call to new_missiles() will dynamically allocate memory and
 * thus comes with a computational overhead during runtime.
 *
 * Each missile is represented by a Trajectory parametrized by a sequence of
 * spatial and velocity data, represented in cartesian coordinates. In order
 * to transform this parametrization back into a spherical parametrization using
 * latitude and longitude pairs, the helper functions lat(), lon(), v_lat() and
 * v_lon() can be used. **Note that spherical arguments have to be given in
 * units of degrees.**
 */

#ifndef PHYSICS_API_H
#define PHYSICS_API_H

#include "config.h"

struct Planets;

/*!
 * \brief Handle to a set of planets forming a closed universe.
 *
 * Planets are kept intentionally opaque in the API and should only be referred
 * to by their respective PlanetsHandler. Internals are subjects to change.
 */
typedef struct Planets *PlanetsHandle;

/*!
 * \brief Sequence of spatial and velocity data of a missile.
 *
 * Note that the size of the trajectory is returned by propagate_missile().
 */
struct Trajectory {
    double x[TRAJECTORY_SIZE][3]; /*!< Cartesian position. */
    double v[TRAJECTORY_SIZE][3]; /*!< Cartesian velocity. */
};

/*!
 * \brief Creates a new planets handle.
 *
 * Allocates a new set of planets and returns a handle. It is the obligation of
 * the caller to initialize all planets before propagating missiles and to
 * prevent memory leakage by deleting all planets with delete_planets().
 *
 * @param n Number of planets.
 * @return Planets handle to yet uninitialized planets.
 */
PlanetsHandle new_planets(unsigned n);

/*!
 * \brief Deletes all planets of the associated handle and frees the allocated
 * memory.
 *
 * @param handle The planets handle.
 */
void delete_planets(PlanetsHandle handle);

/*!
 * \brief Initializes or overwrites the spatial position of a planet.
 *
 * Planets are referred to by unique IDs. For \f$n\f$ planets (cf.
 * new_planets()) the IDs are the integer values \f$[0, 1, 2, \ldots, n-1]\f$.
 * Note that all planets of a universe have to be initialized before missiles
 * are propagated here.
 *
 * @param handle The planets handle.
 * @param i ID of the planet to be initialized.
 * @param lat Latitude in degrees.
 * @param lon Longitude in degrees.
 * @return Zero on success.
 */
int set_planet(PlanetsHandle handle, unsigned i, double lat, double lon);

/*!
 * \brief Removes the last planet from the universe.
 *
 * The last planet in the universe is the one with the largest ID. If called
 * \f$k\f$ times for a universe with \f$n\f$ planets, \f$n-k\f$ planets remain.
 * If \f$k > n\f$ the behavior is undefined.
 *
 * @param handle The planets handle.
 * @return Number of remaining planets in the universe.
 */
unsigned pop_planet(PlanetsHandle handle);

/*!
 * \brief Handle to a batch of trajectories.
 *
 * For the sake of minimizing the number of memory allocation, trajectories can
 * be allocated in batches. A batch is referred to as a handle to trajectories.
 */
typedef struct Trajectory *TrajectoryBatch;

/*!
 * \brief Creates a new batch of uninitialized missiles.
 *
 * Use get_trajectory() and either init_missile() or launch_missile() to
 * initialize missiles. Propagating uninitialized missiles is undefined.
 *
 * @param n Number of missiles to be bundled into a batch.
 * @return The handle to the batch.
 */
TrajectoryBatch new_missiles(unsigned n);

/*!
 * \brief Deletes a batch of missiles and frees the allocated memory.
 *
 * @param batch The handle to the batch.
 */
void delete_missiles(TrajectoryBatch batch);

/*!
 * \brief Extracts a missile by ID from the given missile batch.
 *
 * Missiles are referred to by unique and static IDs within a batch. For a batch
 * of size \f$n\f$ (cf. new_missiles()) the IDs are the integer values \f$[0, 1,
 * 2, \ldots, n-1]\f$.
 *
 * @param batch The handle to the missile batch.
 * @param i The missile ID. The behavior of requesting invalid IDs is undefined.
 * @return The trajectory handle of the requested missile.
 */
struct Trajectory *get_trajectory(TrajectoryBatch batch, unsigned i);

/*!
 * \brief Initializes the position and velocity of a missile on the sphere.
 *
 * @param trj The trajectory handle as obtained from get_trajectory().
 * @param lat The initial latitude, \f$\phi\f$, in units of degrees.
 * @param lon The initial longitude, \f$\lambda\f$, in units of degrees.
 * @param vlat The initial latitudinal speed \f$\dot\phi\f$.
 * @param vlon The initial (scaled) longitudinal speed \f$\dot\lambda
 * \cos\phi\f$.
 * @return Zero on success.
 */
int init_missile(
    struct Trajectory *trj, double lat, double lon, double vlat, double vlon);

/*!
 * \brief Initializes a missile on the rim of a given planet.
 *
 * The missile is placed on the rim of the planet with a radial bearing pointing
 * away from the planet center if the initial velocity is positive. The rim is
 * defined as a circle centered at the planet. Propagation of missiles that fall
 * inside this circle is stopped, cf. propagate_missile().
 *
 * @param trj The trajectory handle as obtained from get_trajectory().
 * @param planets_handle The planets handle.
 * @param planet_id The planet ID.
 * @param v Magnitude of the initial velocity, \f$\sqrt{\dot\phi^2 +
 * (\dot\lambda \cos\phi)^2}\f$, where \f$\phi\f$ and \f$\lambda\f$ are the
 * latitudinal and longitudinal position on the rim in degrees, respectively,
 * and the dot indicates temporal derivatives.
 * @param psi The azimuthal position on the rim in units of degrees.
 * @return Zero on success.
 */
int launch_missile(struct Trajectory *trj,
                   const PlanetsHandle planets_handle,
                   unsigned planet_id,
                   double v,
                   double psi);

/*!
 * \brief Propagates a missile in the gravitational force field of planets.
 *
 * Before calling this method for the first time each missile has to be
 * initialized by either using init_missile() or launch_missile(). Afterwards,
 * multiple calls to this method can be chained until the \p premature flag is
 * set. The behavior of any subsequent calls is undefined until a missile is
 * reinitialized using either init_missile() or launch_missile().
 *
 * If a missile propagates inside the rim of a planet, cf. launch_missile(), the
 * \p premature flag is set to a non-zero value and propagation is stopped.
 *
 * @param trj The trajectory handle as obtained from get_trajectory().
 * @param planets_handle The planets handle.
 * @param h The step size of the integrator. Typically, this value should be
 * \f$\ll 1\f$.
 * @param premature Set to non-zero values if propagation was stopped
 * prematurely. If set this also indicates that the last time interval between
 * consecutive steps of the trajectory is shorter than those of the other
 * consecutive steps.
 * @return Number of simulated steps stored into the trajectory sequence. This
 * value should be used to safely readout the data from Trajectory, i.e., let
 * \f$n\f$ be the returned value, then the first \f$n\f$ points of \p trj were
 * updated by the integrator. Note that this value does not change if the
 * missile passes a rim within the last integration step! (The \p premature flag
 * is still set in this case.)
 */
unsigned propagate_missile(struct Trajectory *trj,
                           const PlanetsHandle planets_handle,
                           double h,
                           int *premature);

/*!
 * \brief Computes the latitudinal position, \f$\phi\f$, from cartesian
 * coordinates.
 *
 * @param z (Third) \f$z\f$-coordinate of cartesian representation.
 * @return Latitude, \f$\phi\f$, in units of degrees.
 */
double lat(double z);

/*!
 * \brief Computes the longitudinal position, \f$\lambda\f$, from cartesian
 * coordinates.
 *
 * @param x (First) \f$x\f$-coordinate of cartesian representation.
 * @param y (Second) \f$y\f$-coordinate of cartesian representation.
 * @return Longitude, \f$\lambda\f$, in units of degrees.
 */
double lon(double x, double y);

/*!
 * \brief Computes the latitudinal speed, \f$\dot\phi\f$, from cartesian
 * coordinates.
 *
 * @param vx (First) \f$x\f$-component of velocity in cartesian representation.
 * @param vy (Second) \f$y\f$-component of velocity in cartesian representation.
 * @param vz (Third) \f$z\f$-component of velocity in cartesian representation.
 * @param lat Latitude, \f$\phi\f$, in degrees as obtained from lat().
 * @param lon Longitude, \f$\lambda\f$, in degrees as obtained from lon().
 * @return Latitudinal speed, \f$\dot\phi\f$.
 */
double v_lat(double vx, double vy, double vz, double lat, double lon);

/*!
 * \brief Computes the (scaled) longitudinal speed, \f$\dot\lambda \cos\phi\f$,
 * from cartesian coordinates.
 *
 * @param vx (First) \f$x\f$-component of velocity in cartesian representation.
 * @param vy (Second) \f$y\f$-component of velocity in cartesian representation.
 * @param vz (Third) \f$z\f$-component of velocity in cartesian representation.
 * @param lon Longitude, \f$\lambda\f$, in degrees as obtained from lon().
 * @return (Scaled) longitudinal speed, \f$\dot\lambda \cos\phi\f$.
 */
double v_lon(double vx, double vy, double vz, double lon);

#endif // PHYSICS_API_H
